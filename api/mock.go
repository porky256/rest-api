// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mock_service is a generated GoMock package.
package api

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/porky256/rest-api/models"
	reflect "reflect"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// AddBook mocks base method.
func (m *MockDatabase) AddBook(book models.Book) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBook", book)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBook indicates an expected call of AddBook.
func (mr *MockDatabaseMockRecorder) AddBook(book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBook", reflect.TypeOf((*MockDatabase)(nil).AddBook), book)
}

// DelBook mocks base method.
func (m *MockDatabase) DelBook(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelBook", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DelBook indicates an expected call of DelBook.
func (mr *MockDatabaseMockRecorder) DelBook(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelBook", reflect.TypeOf((*MockDatabase)(nil).DelBook), id)
}

// GetAllBooks mocks base method.
func (m *MockDatabase) GetAllBooks(filter map[string][]string) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooks", filter)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooks indicates an expected call of GetAllBooks.
func (mr *MockDatabaseMockRecorder) GetAllBooks(filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooks", reflect.TypeOf((*MockDatabase)(nil).GetAllBooks), filter)
}

// GetBookById mocks base method.
func (m *MockDatabase) GetBookById(id int) (models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBookById", id)
	ret0, _ := ret[0].(models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBookById indicates an expected call of GetBookById.
func (mr *MockDatabaseMockRecorder) GetBookById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBookById", reflect.TypeOf((*MockDatabase)(nil).GetBookById), id)
}

// UpdateBook mocks base method.
func (m *MockDatabase) UpdateBook(id int, book models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", id, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockDatabaseMockRecorder) UpdateBook(id, book interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockDatabase)(nil).UpdateBook), id, book)
}
